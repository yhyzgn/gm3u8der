name: Release

on:
  create:
    tags:
      - v*

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - name: Set up Go 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Built env linux and macos
        if: ${{matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'}}
        run: |
          echo "runNumber=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          echo "tagName=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV

      - name: Built env windows
        if: matrix.os == 'windows-latest'
        run: |
          $tagName = (git describe --tags --abbrev=0)
          echo "runNumber=$Env:GITHUB_RUN_NUMBER" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "tagName=$tagName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Get dependencies linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install gcc libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libx11-dev xorg-dev
          export PATH=$PATH:$(go env GOPATH)/bin
          go install fyne.io/fyne/v2/cmd/fyne@latest

      - name: Get dependencies mac
        if: matrix.os == 'macos-latest'
        run: |
          sudo rm -rf /Library/Developer/CommandLineTools
          sudo xcode-select --install
          export PATH=$PATH:$(go env GOPATH)/bin
          go install fyne.io/fyne/v2/cmd/fyne@latest

      - name: Get dependencies windows
        if: matrix.os == 'windows-latest'
        run: |
          $goPath = (go get GOPATH)
          [Environment]::SetEnvironmentVariable("PATH", $Env:PATH  + ";" + $goPath + "\bin", [EnvironmentVariableTarget]::Machine)
          go install fyne.io/fyne/v2/cmd/fyne@latest

      - name: Build linux
        if: matrix.os == 'ubuntu-latest'
        run: fyne package -os linux -icon "assets/img/logo.png"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build mac
        if: matrix.os == 'macos-latest'
        run: fyne package -os darwin -icon "assets/img/logo.png"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build windows
        if: matrix.os == 'windows-latest'
        run: fyne package -os windows -icon "assets/img/logo.png"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Gzip linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir gm3u8der-linux-amd64
          cp gm3u8der.tar.xz gm3u8der-linux-amd64/gm3u8der.tar.xz
          tar -czvf gm3u8der-linux-amd64-${{ env.tagName }}_${{ env.runNumber }}.tar.gz gm3u8der-linux-amd64
          cp ffmpeg/ffmpeg.lnx gm3u8der-linux-amd64/ffmpeg
          chmod +x gm3u8der-linux-amd64/ffmpeg
          tar -czvf gm3u8der-linux-amd64-with-ffmpeg-${{ env.tagName }}_${{ env.runNumber }}.tar.gz gm3u8der-linux-amd64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Gzip mac
        if: matrix.os == 'macos-latest'
        run: |
          mkdir gm3u8der-mac-amd64
          cp -r gm3u8der.app gm3u8der-mac-amd64/gm3u8der.app
          tar -czvf gm3u8der-mac-amd64-${{ env.tagName }}_${{ env.runNumber }}.tar.gz gm3u8der-mac-amd64
          cp ffmpeg/ffmpeg.mac gm3u8der-mac-amd64/ffmpeg
          chmod +x gm3u8der-mac-amd64/ffmpeg
          tar -czvf gm3u8der-mac-amd64-with-ffmpeg-${{ env.tagName }}_${{ env.runNumber }}.tar.gz gm3u8der-mac-amd64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Gzip windows
        if: matrix.os == 'windows-latest'
        run: |
          mkdir gm3u8der-windows-amd64
          cp gm3u8der.exe gm3u8der-windows-amd64/gm3u8der.exe
          tar -czvf gm3u8der-windows-amd64-${{ env.tagName }}_${{ env.runNumber }}.tar.gz gm3u8der-windows-amd64
          cp ffmpeg/ffmpeg.exe gm3u8der-windows-amd64/ffmpeg.exe
          tar -czvf gm3u8der-windows-amd64-with-ffmpeg-${{ env.tagName }}_${{ env.runNumber }}.tar.gz gm3u8der-windows-amd64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: |
            [最新版本下载](https://github.com/yhyzgn/gm3u8der/releases)
          files: "*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}

